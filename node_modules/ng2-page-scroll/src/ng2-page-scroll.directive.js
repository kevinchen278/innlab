"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require('@angular/router');
var ng2_page_scroll_config_1 = require('./ng2-page-scroll-config');
var ng2_page_scroll_manager_1 = require('./ng2-page-scroll-manager');
var PageScroll = (function () {
    function PageScroll(el, router) {
        this.el = el;
        this.router = router;
        this.pageScrollOffset = null;
        this.pageScrollDuration = null;
        this.pageScrollEasing = null;
        this.pageScrollFinish = new core_1.EventEmitter();
        this.timer = null;
        this.interruptListenersAttached = false;
        this.document = el.nativeElement.ownerDocument;
        this.body = el.nativeElement.ownerDocument.body;
        this.scrollTopSources = [this.document.documentElement, this.body, this.document.body.parentNode];
    }
    PageScroll.isUndefinedOrNull = function (variable) {
        return (typeof variable === 'undefined') || variable === undefined || variable === null;
    };
    PageScroll.prototype.ngOnDestroy = function () {
        if (this.interruptListenersAttached) {
            ng2_page_scroll_manager_1.PageScrollManager.detachInterfereListeners(this.body);
        }
        return undefined;
    };
    PageScroll.prototype.stop = function () {
        return this.stopInternal(true);
    };
    PageScroll.prototype.handleClick = function (clickEvent) {
        var _this = this;
        if (this.routerLink) {
            // We need to navigate their first.
            // Navigation is handled by the routerLink directive
            // so we only need to listen for route change
            // Note: the change event is also emitted when navigating to the current route again
            var subscription_1 = this.router.events.subscribe(function (routerEvent) {
                if (routerEvent instanceof router_1.NavigationEnd) {
                    subscription_1.unsubscribe();
                    _this.scrollView(_this.href);
                }
                else if (routerEvent instanceof router_1.NavigationError || routerEvent instanceof router_1.NavigationCancel) {
                    subscription_1.unsubscribe();
                }
            });
        }
        else {
            this.scrollView(this.href);
        }
        return false; // to preventDefault()
    };
    PageScroll.prototype.scrollView = function (anchor) {
        var _this = this;
        // Stop all possibly running scroll animations
        ng2_page_scroll_manager_1.PageScrollManager.stopAll();
        var anchorTarget = this.document.getElementById(anchor.substr(1));
        if (anchorTarget === null) {
            // Target not found, so stop
            return;
        }
        var pageScrollOffset = (PageScroll.isUndefinedOrNull(this.pageScrollOffset) ? ng2_page_scroll_config_1.PageScrollConfig.defaultScrollOffset : this.pageScrollOffset);
        var targetScrollTop = anchorTarget.offsetTop - pageScrollOffset;
        var startScrollTop = this.scrollTopSources.reduce(function (previousValue, currentValue, currentIndex, array) {
            // Get the scrolltop value of the first scrollTopSource that returns a value for its "scrollTop" property
            // that is not undefined and unequal to 0
            return previousValue ? previousValue : (currentValue && currentValue.scrollTop);
        }, undefined);
        var distanceToScroll = targetScrollTop - startScrollTop;
        if (distanceToScroll === 0) {
            // We're at the final destination already, so stop
            return;
        }
        var startTime = new Date().getTime();
        var intervalConf = {
            startScrollTop: startScrollTop,
            targetScrollTop: targetScrollTop,
            distanceToScroll: distanceToScroll,
            startTime: startTime,
            easing: this.pageScrollEasing === null ? ng2_page_scroll_config_1.PageScrollConfig.defaultEasingFunction : this.pageScrollEasing
        };
        intervalConf.duration =
            this.pageScrollDuration === null ? ng2_page_scroll_config_1.PageScrollConfig.defaultDuration : this.pageScrollDuration;
        intervalConf.endTime = intervalConf.startTime + intervalConf.duration;
        if (intervalConf.duration <= ng2_page_scroll_config_1.PageScrollConfig._interval) {
            // We should go there directly, as our "animation" would have one big step
            // only anyway and this way we save the interval stuff
            this.body.scrollTop = intervalConf.targetScrollTop;
            this.pageScrollFinish.emit(true);
            return;
        }
        // Register the interrupt listeners if we want an interruptible scroll animation
        if (this.pageScrollInterruptible
            || (PageScroll.isUndefinedOrNull(this.pageScrollInterruptible) && ng2_page_scroll_config_1.PageScrollConfig.defaultInterruptible)) {
            ng2_page_scroll_manager_1.PageScrollManager.attachInterfereListeners(this.body);
            this.interruptListenersAttached = true;
        }
        this.timer = setInterval(function (conf) {
            var currentTime = new Date().getTime();
            var newScrollTop;
            if (conf.endTime <= currentTime) {
                _this.stopInternal(false);
                newScrollTop = conf.targetScrollTop;
            }
            else {
                newScrollTop = conf.easing(currentTime - conf.startTime, conf.startScrollTop, conf.distanceToScroll, conf.duration);
            }
            // Set the new scrollTop to all scrollTopSource elements
            _this.scrollTopSources.forEach(function (scrollTopSource) {
                if (scrollTopSource && !PageScroll.isUndefinedOrNull(scrollTopSource.scrollTop)) {
                    scrollTopSource.scrollTop = newScrollTop;
                }
            });
        }, ng2_page_scroll_config_1.PageScrollConfig._interval, intervalConf);
        // Register the instance as running one
        ng2_page_scroll_manager_1.PageScrollManager.add(this);
    };
    PageScroll.prototype.stopInternal = function (interrupted) {
        ng2_page_scroll_manager_1.PageScrollManager.remove(this);
        if (this.interruptListenersAttached) {
            ng2_page_scroll_manager_1.PageScrollManager.detachInterfereListeners(this.body);
            this.interruptListenersAttached = false;
        }
        if (this.timer) {
            clearInterval(this.timer);
            this.pageScrollFinish.emit(!interrupted);
            return true;
        }
        return false;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], PageScroll.prototype, "routerLink", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], PageScroll.prototype, "href", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], PageScroll.prototype, "pageScrollOffset", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], PageScroll.prototype, "pageScrollDuration", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Function)
    ], PageScroll.prototype, "pageScrollEasing", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], PageScroll.prototype, "pageScrollInterruptible", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], PageScroll.prototype, "pageScrollFinish", void 0);
    __decorate([
        core_1.HostListener('click', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Event]), 
        __metadata('design:returntype', Boolean)
    ], PageScroll.prototype, "handleClick", null);
    PageScroll = __decorate([
        core_1.Directive({
            selector: '[pageScroll]'
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, router_1.Router])
    ], PageScroll);
    return PageScroll;
}());
exports.PageScroll = PageScroll;
//# sourceMappingURL=ng2-page-scroll.directive.js.map