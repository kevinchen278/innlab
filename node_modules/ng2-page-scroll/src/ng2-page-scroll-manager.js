"use strict";
var ng2_page_scroll_config_1 = require('./ng2-page-scroll-config');
var PageScrollManager = (function () {
    function PageScrollManager() {
    }
    PageScrollManager.add = function (pageScroll) {
        this.runningInstances.push(pageScroll);
    };
    PageScrollManager.stopAll = function () {
        if (PageScrollManager.runningInstances.length > 0) {
            PageScrollManager.runningInstances.forEach(function (pageScroll, index) {
                pageScroll.stop();
            });
            return true;
        }
        return false;
    };
    PageScrollManager.remove = function (pageScroll) {
        var index = PageScrollManager.runningInstances.indexOf(pageScroll);
        if (index >= 0) {
            PageScrollManager.runningInstances.splice(index, 1);
            return true;
        }
        return false;
    };
    PageScrollManager.attachInterfereListeners = function (body) {
        ng2_page_scroll_config_1.PageScrollConfig._interruptEvents.forEach(function (event) { return body.addEventListener(event, PageScrollManager.listener); });
    };
    PageScrollManager.detachInterfereListeners = function (body) {
        ng2_page_scroll_config_1.PageScrollConfig._interruptEvents.forEach(function (event) { return body.removeEventListener(event, PageScrollManager.listener); });
    };
    // Static Array containing all possibly running scroll animations
    PageScrollManager.runningInstances = [];
    PageScrollManager.listener = function (event) {
        // Stop the scroll animation if the user interferes with it
        if (event.type !== 'keyup' || ng2_page_scroll_config_1.PageScrollConfig._interruptKeys.indexOf(event.keyCode) >= 0) {
            PageScrollManager.stopAll();
        }
    };
    return PageScrollManager;
}());
exports.PageScrollManager = PageScrollManager;
//# sourceMappingURL=ng2-page-scroll-manager.js.map