System.registerDynamic("src/ng2-page-scroll.directive", ["@angular/core", "@angular/router", "./ng2-page-scroll-config", "./ng2-page-scroll-manager"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('@angular/core');
  var router_1 = $__require('@angular/router');
  var ng2_page_scroll_config_1 = $__require('./ng2-page-scroll-config');
  var ng2_page_scroll_manager_1 = $__require('./ng2-page-scroll-manager');
  var PageScroll = (function() {
    function PageScroll(el, router) {
      this.el = el;
      this.router = router;
      this.pageScrollOffset = null;
      this.pageScrollDuration = null;
      this.pageScrollEasing = null;
      this.pageScrollFinish = new core_1.EventEmitter();
      this.timer = null;
      this.interruptListenersAttached = false;
      this.document = el.nativeElement.ownerDocument;
      this.body = el.nativeElement.ownerDocument.body;
      this.scrollTopSources = [this.document.documentElement, this.body, this.document.body.parentNode];
    }
    PageScroll.isUndefinedOrNull = function(variable) {
      return (typeof variable === 'undefined') || variable === undefined || variable === null;
    };
    PageScroll.prototype.ngOnDestroy = function() {
      if (this.interruptListenersAttached) {
        ng2_page_scroll_manager_1.PageScrollManager.detachInterfereListeners(this.body);
      }
      return undefined;
    };
    PageScroll.prototype.stop = function() {
      return this.stopInternal(true);
    };
    PageScroll.prototype.handleClick = function(clickEvent) {
      var _this = this;
      if (this.routerLink) {
        var subscription_1 = this.router.events.subscribe(function(routerEvent) {
          if (routerEvent instanceof router_1.NavigationEnd) {
            subscription_1.unsubscribe();
            _this.scrollView(_this.href);
          } else if (routerEvent instanceof router_1.NavigationError || routerEvent instanceof router_1.NavigationCancel) {
            subscription_1.unsubscribe();
          }
        });
      } else {
        this.scrollView(this.href);
      }
      return false;
    };
    PageScroll.prototype.scrollView = function(anchor) {
      var _this = this;
      ng2_page_scroll_manager_1.PageScrollManager.stopAll();
      var anchorTarget = this.document.getElementById(anchor.substr(1));
      if (anchorTarget === null) {
        return;
      }
      var pageScrollOffset = (PageScroll.isUndefinedOrNull(this.pageScrollOffset) ? ng2_page_scroll_config_1.PageScrollConfig.defaultScrollOffset : this.pageScrollOffset);
      var targetScrollTop = anchorTarget.offsetTop - pageScrollOffset;
      var startScrollTop = this.scrollTopSources.reduce(function(previousValue, currentValue, currentIndex, array) {
        return previousValue ? previousValue : (currentValue && currentValue.scrollTop);
      }, undefined);
      var distanceToScroll = targetScrollTop - startScrollTop;
      if (distanceToScroll === 0) {
        return;
      }
      var startTime = new Date().getTime();
      var intervalConf = {
        startScrollTop: startScrollTop,
        targetScrollTop: targetScrollTop,
        distanceToScroll: distanceToScroll,
        startTime: startTime,
        easing: this.pageScrollEasing === null ? ng2_page_scroll_config_1.PageScrollConfig.defaultEasingFunction : this.pageScrollEasing
      };
      intervalConf.duration = this.pageScrollDuration === null ? ng2_page_scroll_config_1.PageScrollConfig.defaultDuration : this.pageScrollDuration;
      intervalConf.endTime = intervalConf.startTime + intervalConf.duration;
      if (intervalConf.duration <= ng2_page_scroll_config_1.PageScrollConfig._interval) {
        this.body.scrollTop = intervalConf.targetScrollTop;
        this.pageScrollFinish.emit(true);
        return;
      }
      if (this.pageScrollInterruptible || (PageScroll.isUndefinedOrNull(this.pageScrollInterruptible) && ng2_page_scroll_config_1.PageScrollConfig.defaultInterruptible)) {
        ng2_page_scroll_manager_1.PageScrollManager.attachInterfereListeners(this.body);
        this.interruptListenersAttached = true;
      }
      this.timer = setInterval(function(conf) {
        var currentTime = new Date().getTime();
        var newScrollTop;
        if (conf.endTime <= currentTime) {
          _this.stopInternal(false);
          newScrollTop = conf.targetScrollTop;
        } else {
          newScrollTop = conf.easing(currentTime - conf.startTime, conf.startScrollTop, conf.distanceToScroll, conf.duration);
        }
        _this.scrollTopSources.forEach(function(scrollTopSource) {
          if (scrollTopSource && !PageScroll.isUndefinedOrNull(scrollTopSource.scrollTop)) {
            scrollTopSource.scrollTop = newScrollTop;
          }
        });
      }, ng2_page_scroll_config_1.PageScrollConfig._interval, intervalConf);
      ng2_page_scroll_manager_1.PageScrollManager.add(this);
    };
    PageScroll.prototype.stopInternal = function(interrupted) {
      ng2_page_scroll_manager_1.PageScrollManager.remove(this);
      if (this.interruptListenersAttached) {
        ng2_page_scroll_manager_1.PageScrollManager.detachInterfereListeners(this.body);
        this.interruptListenersAttached = false;
      }
      if (this.timer) {
        clearInterval(this.timer);
        this.pageScrollFinish.emit(!interrupted);
        return true;
      }
      return false;
    };
    __decorate([core_1.Input(), __metadata('design:type', Object)], PageScroll.prototype, "routerLink", void 0);
    __decorate([core_1.Input(), __metadata('design:type', String)], PageScroll.prototype, "href", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Number)], PageScroll.prototype, "pageScrollOffset", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Number)], PageScroll.prototype, "pageScrollDuration", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Function)], PageScroll.prototype, "pageScrollEasing", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Boolean)], PageScroll.prototype, "pageScrollInterruptible", void 0);
    __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], PageScroll.prototype, "pageScrollFinish", void 0);
    __decorate([core_1.HostListener('click', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Event]), __metadata('design:returntype', Boolean)], PageScroll.prototype, "handleClick", null);
    PageScroll = __decorate([core_1.Directive({selector: '[pageScroll]'}), __metadata('design:paramtypes', [core_1.ElementRef, router_1.Router])], PageScroll);
    return PageScroll;
  }());
  exports.PageScroll = PageScroll;
  return module.exports;
});

System.registerDynamic("src/ng2-page-scroll-manager", ["./ng2-page-scroll-config"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ng2_page_scroll_config_1 = $__require('./ng2-page-scroll-config');
  var PageScrollManager = (function() {
    function PageScrollManager() {}
    PageScrollManager.add = function(pageScroll) {
      this.runningInstances.push(pageScroll);
    };
    PageScrollManager.stopAll = function() {
      if (PageScrollManager.runningInstances.length > 0) {
        PageScrollManager.runningInstances.forEach(function(pageScroll, index) {
          pageScroll.stop();
        });
        return true;
      }
      return false;
    };
    PageScrollManager.remove = function(pageScroll) {
      var index = PageScrollManager.runningInstances.indexOf(pageScroll);
      if (index >= 0) {
        PageScrollManager.runningInstances.splice(index, 1);
        return true;
      }
      return false;
    };
    PageScrollManager.attachInterfereListeners = function(body) {
      ng2_page_scroll_config_1.PageScrollConfig._interruptEvents.forEach(function(event) {
        return body.addEventListener(event, PageScrollManager.listener);
      });
    };
    PageScrollManager.detachInterfereListeners = function(body) {
      ng2_page_scroll_config_1.PageScrollConfig._interruptEvents.forEach(function(event) {
        return body.removeEventListener(event, PageScrollManager.listener);
      });
    };
    PageScrollManager.runningInstances = [];
    PageScrollManager.listener = function(event) {
      if (event.type !== 'keyup' || ng2_page_scroll_config_1.PageScrollConfig._interruptKeys.indexOf(event.keyCode) >= 0) {
        PageScrollManager.stopAll();
      }
    };
    return PageScrollManager;
  }());
  exports.PageScrollManager = PageScrollManager;
  return module.exports;
});

System.registerDynamic("src/ng2-page-scroll-config", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var PageScrollConfig = (function() {
    function PageScrollConfig() {}
    Object.defineProperty(PageScrollConfig, "defaultEasingFunction", {
      get: function() {
        return PageScrollConfig._easingFunction;
      },
      set: function(easingFunction) {
        PageScrollConfig._easingFunction = easingFunction;
      },
      enumerable: true,
      configurable: true
    });
    PageScrollConfig._interval = 10;
    PageScrollConfig.defaultDuration = 1250;
    PageScrollConfig.defaultScrollOffset = 0;
    PageScrollConfig._interruptEvents = ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'];
    PageScrollConfig._interruptKeys = [33, 34, 35, 36, 38, 40];
    PageScrollConfig.defaultInterruptible = true;
    PageScrollConfig._easingFunction = function(t, b, c, d) {
      return c * t / d + b;
    };
    return PageScrollConfig;
  }());
  exports.PageScrollConfig = PageScrollConfig;
  return module.exports;
});

System.registerDynamic("ng2-page-scroll", ["./src/ng2-page-scroll.directive", "./src/ng2-page-scroll-manager", "./src/ng2-page-scroll-config"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  __export($__require('./src/ng2-page-scroll.directive'));
  __export($__require('./src/ng2-page-scroll-manager'));
  __export($__require('./src/ng2-page-scroll-config'));
  return module.exports;
});
